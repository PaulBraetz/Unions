// <auto-generated>
// This file was generated using a tool. Manual changes could be overwritten at any point.
// </auto-generated>
namespace RhoMicro.Unions.Abstractions;
using System;

/// <summary>
/// Represents a superset union type.
/// </summary>
/// <typeparam name = "TSubset">The subset union type that this union type is a superset of.</typeparam>
/// <typeparam name = "TSuperset">This type (akin to <c>TSelf</c>).</typeparam>
public interface ISuperset<TSubset, TSuperset>
    where TSuperset : ISuperset<TSubset, TSuperset>
{
    /// <summary>
    /// Implicitly converts an instance of the subset union type to this superset union type.
    /// </summary>
    /// <param name = "subset">The subset union type instance to convert.</param>
    static abstract implicit operator TSuperset(TSubset subset);
    /// <summary>
    /// Explicitly converts an instance of this superset union type to the subset union type.
    /// </summary>
    /// <param name = "superset">The superset union type instance to convert.</param>
    static abstract explicit operator TSubset(TSuperset superset);
}

/// <summary>
/// Represents a union type that is able to be converted to a type.
/// </summary>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf>
    where TSelf : IUnion<TSelf>
{
    /// <summary>
    /// Gets the type reresented by this instance.
    /// </summary>
    /// <returns>The type represented by this instance.</returns>
    Type GetRepresentedType();
    /// <summary>
    /// Determines whether this instance is representing a value of type <typeparamref name = "T"/>.
    /// </summary>
    /// <typeparam name = "T">The type whose representation in this instance to determine.</typeparam>
    /// <returns><see langword="true"/> if this instance is representing a value of type <typeparamref name = "T"/>; otherwise, <see langword="false"/>.</returns>
    Boolean Is<T>();
    /// <summary>
    /// Determines whether this instance is representing a value of the type provided.
    /// </summary>
    /// <param name = "type">The type whose representation in this instance to determine.</param>
    /// <returns><see langword="true"/> if this instance is representing a value of the type provided; otherwise, <see langword="false"/>.</returns>
    Boolean Is(Type type);
    /// <summary>
    /// Attempts to get the value represented by this type as an instance of <typeparamref name = "T"/>.
    /// </summary>
    /// <typeparam name = "T">The type to retrieve this instances' value as.</typeparam>
    /// <returns>The value of this instance, if it is representing a value of type <typeparamref name = "T"/>; otherwise, an exception of type <see cref = "InvalidOperationException"/> will be thrown.</returns>
    T As<T>();
    /// <summary>
    /// Attempts to create a new instance of the union type using the value provided.
    /// </summary>
    /// <typeparam name = "T">The type of value from which to create an instance of <typeparamref name = "TSelf"/>.</typeparam>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <param name = "instance">A new instance of <typeparamref name = "TSelf"/> if one could be created using <paramref name = "value"/>; otherwise, <see langword="default"/>.</param>
    /// <returns><see langword="true"/> if an instance of <typeparamref name = "TSelf"/> could be created; otherwise, <see langword="false"/>.</returns>
    static abstract Boolean TryCreate<T>(T value, out TSelf instance);
    /// <summary>
    /// Creates a new instance of the union type using the value provided.
    /// </summary>
    /// <typeparam name = "T">The type of value from which to create an instance of <typeparamref name = "TSelf"/>.</typeparam>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/> if one could be created using <paramref name = "value"/>; otherwise, an exception of type <see cref = "ArgumentException"/> will be thrown.</returns>
    static abstract TSelf Create<T>(T value);
}

/// <summary>
/// Represents a union type that is able to represent 1 type
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    void Switch(Action<T1> onT1);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T1"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T1 value);
}

/// <summary>
/// Represents a union type that is able to represent 2 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T2"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T2 value);
}

/// <summary>
/// Represents a union type that is able to represent 3 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T3"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T3 value);
}

/// <summary>
/// Represents a union type that is able to represent 4 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T4"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T4 value);
}

/// <summary>
/// Represents a union type that is able to represent 5 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T5"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T5 value);
}

/// <summary>
/// Represents a union type that is able to represent 6 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T6"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T6 value);
}

/// <summary>
/// Represents a union type that is able to represent 7 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T7"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T7 value);
}

/// <summary>
/// Represents a union type that is able to represent 8 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T8"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T8 value);
}

/// <summary>
/// Represents a union type that is able to represent 9 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T9"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T9 value);
}

/// <summary>
/// Represents a union type that is able to represent 10 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T10"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T10 value);
}

/// <summary>
/// Represents a union type that is able to represent 11 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T11"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T11 value);
}

/// <summary>
/// Represents a union type that is able to represent 12 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T12"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T12 value);
}

/// <summary>
/// Represents a union type that is able to represent 13 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T13"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T13 value);
}

/// <summary>
/// Represents a union type that is able to represent 14 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T14"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T14 value);
}

/// <summary>
/// Represents a union type that is able to represent 15 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T15"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T15 value);
}

/// <summary>
/// Represents a union type that is able to represent 16 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T16"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T16 value);
}

/// <summary>
/// Represents a union type that is able to represent 17 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T17"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T17 value);
}

/// <summary>
/// Represents a union type that is able to represent 18 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T18"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T18 value);
}

/// <summary>
/// Represents a union type that is able to represent 19 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T19"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T19 value);
}

/// <summary>
/// Represents a union type that is able to represent 20 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T20"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T20 value);
}

/// <summary>
/// Represents a union type that is able to represent 21 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T21">The 21st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The handler to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20, Action<T21> onT21);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The projection to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20, Func<T21, TResult> onT21);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T21"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T21 value);
}

/// <summary>
/// Represents a union type that is able to represent 22 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T21">The 21st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T22">The 22nd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The handler to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The handler to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20, Action<T21> onT21, Action<T22> onT22);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The projection to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The projection to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20, Func<T21, TResult> onT21, Func<T22, TResult> onT22);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T22"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T22 value);
}

/// <summary>
/// Represents a union type that is able to represent 23 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T21">The 21st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T22">The 22nd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T23">The 22rd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The handler to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The handler to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The handler to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20, Action<T21> onT21, Action<T22> onT22, Action<T23> onT23);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The projection to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The projection to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The projection to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20, Func<T21, TResult> onT21, Func<T22, TResult> onT22, Func<T23, TResult> onT23);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T23"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T23 value);
}

/// <summary>
/// Represents a union type that is able to represent 24 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T21">The 21st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T22">The 22nd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T23">The 22rd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T24">The 24th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The handler to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The handler to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The handler to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The handler to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20, Action<T21> onT21, Action<T22> onT22, Action<T23> onT23, Action<T24> onT24);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The projection to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The projection to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The projection to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The projection to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20, Func<T21, TResult> onT21, Func<T22, TResult> onT22, Func<T23, TResult> onT23, Func<T24, TResult> onT24);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T24"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T24 value);
}

/// <summary>
/// Represents a union type that is able to represent 25 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T21">The 21st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T22">The 22nd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T23">The 22rd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T24">The 24th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T25">The 25th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The handler to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The handler to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The handler to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The handler to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The handler to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20, Action<T21> onT21, Action<T22> onT22, Action<T23> onT23, Action<T24> onT24, Action<T25> onT25);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The projection to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The projection to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The projection to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The projection to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The projection to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20, Func<T21, TResult> onT21, Func<T22, TResult> onT22, Func<T23, TResult> onT23, Func<T24, TResult> onT24, Func<T25, TResult> onT25);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T25"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T25 value);
}

/// <summary>
/// Represents a union type that is able to represent 26 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T21">The 21st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T22">The 22nd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T23">The 22rd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T24">The 24th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T25">The 25th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T26">The 26th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The handler to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The handler to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The handler to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The handler to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The handler to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The handler to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20, Action<T21> onT21, Action<T22> onT22, Action<T23> onT23, Action<T24> onT24, Action<T25> onT25, Action<T26> onT26);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The projection to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The projection to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The projection to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The projection to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The projection to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The projection to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20, Func<T21, TResult> onT21, Func<T22, TResult> onT22, Func<T23, TResult> onT23, Func<T24, TResult> onT24, Func<T25, TResult> onT25, Func<T26, TResult> onT26);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T26"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T26 value);
}

/// <summary>
/// Represents a union type that is able to represent 27 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T21">The 21st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T22">The 22nd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T23">The 22rd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T24">The 24th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T25">The 25th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T26">The 26th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T27">The 27th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The handler to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The handler to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The handler to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The handler to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The handler to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The handler to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <param name = "onT27">The handler to invoke if the represented type is <typeparamref name = "T27"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20, Action<T21> onT21, Action<T22> onT22, Action<T23> onT23, Action<T24> onT24, Action<T25> onT25, Action<T26> onT26, Action<T27> onT27);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The projection to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The projection to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The projection to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The projection to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The projection to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The projection to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <param name = "onT27">The projection to invoke if the represented type is <typeparamref name = "T27"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20, Func<T21, TResult> onT21, Func<T22, TResult> onT22, Func<T23, TResult> onT23, Func<T24, TResult> onT24, Func<T25, TResult> onT25, Func<T26, TResult> onT26, Func<T27, TResult> onT27);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T27"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T27 value);
}

/// <summary>
/// Represents a union type that is able to represent 28 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T21">The 21st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T22">The 22nd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T23">The 22rd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T24">The 24th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T25">The 25th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T26">The 26th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T27">The 27th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T28">The 28th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The handler to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The handler to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The handler to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The handler to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The handler to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The handler to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <param name = "onT27">The handler to invoke if the represented type is <typeparamref name = "T27"/>.</param>
    /// <param name = "onT28">The handler to invoke if the represented type is <typeparamref name = "T28"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20, Action<T21> onT21, Action<T22> onT22, Action<T23> onT23, Action<T24> onT24, Action<T25> onT25, Action<T26> onT26, Action<T27> onT27, Action<T28> onT28);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The projection to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The projection to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The projection to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The projection to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The projection to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The projection to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <param name = "onT27">The projection to invoke if the represented type is <typeparamref name = "T27"/>.</param>
    /// <param name = "onT28">The projection to invoke if the represented type is <typeparamref name = "T28"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20, Func<T21, TResult> onT21, Func<T22, TResult> onT22, Func<T23, TResult> onT23, Func<T24, TResult> onT24, Func<T25, TResult> onT25, Func<T26, TResult> onT26, Func<T27, TResult> onT27, Func<T28, TResult> onT28);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T28"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T28 value);
}

/// <summary>
/// Represents a union type that is able to represent 29 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T21">The 21st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T22">The 22nd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T23">The 22rd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T24">The 24th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T25">The 25th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T26">The 26th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T27">The 27th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T28">The 28th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T29">The 29th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The handler to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The handler to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The handler to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The handler to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The handler to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The handler to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <param name = "onT27">The handler to invoke if the represented type is <typeparamref name = "T27"/>.</param>
    /// <param name = "onT28">The handler to invoke if the represented type is <typeparamref name = "T28"/>.</param>
    /// <param name = "onT29">The handler to invoke if the represented type is <typeparamref name = "T29"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20, Action<T21> onT21, Action<T22> onT22, Action<T23> onT23, Action<T24> onT24, Action<T25> onT25, Action<T26> onT26, Action<T27> onT27, Action<T28> onT28, Action<T29> onT29);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The projection to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The projection to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The projection to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The projection to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The projection to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The projection to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <param name = "onT27">The projection to invoke if the represented type is <typeparamref name = "T27"/>.</param>
    /// <param name = "onT28">The projection to invoke if the represented type is <typeparamref name = "T28"/>.</param>
    /// <param name = "onT29">The projection to invoke if the represented type is <typeparamref name = "T29"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20, Func<T21, TResult> onT21, Func<T22, TResult> onT22, Func<T23, TResult> onT23, Func<T24, TResult> onT24, Func<T25, TResult> onT25, Func<T26, TResult> onT26, Func<T27, TResult> onT27, Func<T28, TResult> onT28, Func<T29, TResult> onT29);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T29"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T29 value);
}

/// <summary>
/// Represents a union type that is able to represent 30 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T21">The 21st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T22">The 22nd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T23">The 22rd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T24">The 24th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T25">The 25th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T26">The 26th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T27">The 27th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T28">The 28th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T29">The 29th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T30">The 30th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The handler to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The handler to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The handler to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The handler to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The handler to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The handler to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <param name = "onT27">The handler to invoke if the represented type is <typeparamref name = "T27"/>.</param>
    /// <param name = "onT28">The handler to invoke if the represented type is <typeparamref name = "T28"/>.</param>
    /// <param name = "onT29">The handler to invoke if the represented type is <typeparamref name = "T29"/>.</param>
    /// <param name = "onT30">The handler to invoke if the represented type is <typeparamref name = "T30"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20, Action<T21> onT21, Action<T22> onT22, Action<T23> onT23, Action<T24> onT24, Action<T25> onT25, Action<T26> onT26, Action<T27> onT27, Action<T28> onT28, Action<T29> onT29, Action<T30> onT30);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The projection to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The projection to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The projection to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The projection to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The projection to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The projection to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <param name = "onT27">The projection to invoke if the represented type is <typeparamref name = "T27"/>.</param>
    /// <param name = "onT28">The projection to invoke if the represented type is <typeparamref name = "T28"/>.</param>
    /// <param name = "onT29">The projection to invoke if the represented type is <typeparamref name = "T29"/>.</param>
    /// <param name = "onT30">The projection to invoke if the represented type is <typeparamref name = "T30"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20, Func<T21, TResult> onT21, Func<T22, TResult> onT22, Func<T23, TResult> onT23, Func<T24, TResult> onT24, Func<T25, TResult> onT25, Func<T26, TResult> onT26, Func<T27, TResult> onT27, Func<T28, TResult> onT28, Func<T29, TResult> onT29, Func<T30, TResult> onT30);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T30"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T30 value);
}

/// <summary>
/// Represents a union type that is able to represent 31 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T21">The 21st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T22">The 22nd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T23">The 22rd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T24">The 24th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T25">The 25th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T26">The 26th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T27">The 27th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T28">The 28th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T29">The 29th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T30">The 30th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T31">The 31st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The handler to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The handler to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The handler to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The handler to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The handler to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The handler to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <param name = "onT27">The handler to invoke if the represented type is <typeparamref name = "T27"/>.</param>
    /// <param name = "onT28">The handler to invoke if the represented type is <typeparamref name = "T28"/>.</param>
    /// <param name = "onT29">The handler to invoke if the represented type is <typeparamref name = "T29"/>.</param>
    /// <param name = "onT30">The handler to invoke if the represented type is <typeparamref name = "T30"/>.</param>
    /// <param name = "onT31">The handler to invoke if the represented type is <typeparamref name = "T31"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20, Action<T21> onT21, Action<T22> onT22, Action<T23> onT23, Action<T24> onT24, Action<T25> onT25, Action<T26> onT26, Action<T27> onT27, Action<T28> onT28, Action<T29> onT29, Action<T30> onT30, Action<T31> onT31);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The projection to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The projection to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The projection to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The projection to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The projection to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The projection to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <param name = "onT27">The projection to invoke if the represented type is <typeparamref name = "T27"/>.</param>
    /// <param name = "onT28">The projection to invoke if the represented type is <typeparamref name = "T28"/>.</param>
    /// <param name = "onT29">The projection to invoke if the represented type is <typeparamref name = "T29"/>.</param>
    /// <param name = "onT30">The projection to invoke if the represented type is <typeparamref name = "T30"/>.</param>
    /// <param name = "onT31">The projection to invoke if the represented type is <typeparamref name = "T31"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20, Func<T21, TResult> onT21, Func<T22, TResult> onT22, Func<T23, TResult> onT23, Func<T24, TResult> onT24, Func<T25, TResult> onT25, Func<T26, TResult> onT26, Func<T27, TResult> onT27, Func<T28, TResult> onT28, Func<T29, TResult> onT29, Func<T30, TResult> onT30, Func<T31, TResult> onT31);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T31"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T31 value);
}

/// <summary>
/// Represents a union type that is able to represent 32 types
/// </summary>
/// <typeparam name = "T1">The first type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T2">The second type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T3">The third type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T4">The fourth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T5">The fifth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T6">The sixth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T7">The seventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T8">The eigth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T9">The ninth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T10">The tenth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T11">The eleventh type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T12">The twelfth type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T13">The 13th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T14">The 14th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T15">The 15th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T16">The 16th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T17">The 17th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T18">The 18th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T19">The 19th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T20">The 20th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T21">The 21st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T22">The 22nd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T23">The 22rd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T24">The 24th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T25">The 25th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T26">The 26th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T27">The 27th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T28">The 28th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T29">The 29th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T30">The 30th type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T31">The 31st type unions of this type are able to represent.</typeparam>
/// <typeparam name = "T32">The 32nd type unions of this type are able to represent.</typeparam>
/// <typeparam name = "TSelf">The union type.</typeparam>
public interface IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> : IUnion<TSelf> where TSelf : IUnion<TSelf, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>
{
    /// <summary>
    /// Safely converts this instance to a union type that is either a superset of or congruent to this one.
    /// </summary>
    /// <typeparam name = "TSuperset">The type of union to convert this instance to.</typeparam>
    /// <returns>This instance converted to an instance of <typeparamref name = "TSuperset"/>.</returns>
    TSuperset DownCast<TSuperset>()
        where TSuperset : IUnion<TSuperset, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>;
    /// <summary>
    /// Invokes a handler based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The handler to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The handler to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The handler to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The handler to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The handler to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The handler to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The handler to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The handler to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The handler to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The handler to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The handler to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The handler to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The handler to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The handler to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The handler to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The handler to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The handler to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The handler to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The handler to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The handler to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The handler to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The handler to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The handler to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The handler to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The handler to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The handler to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <param name = "onT27">The handler to invoke if the represented type is <typeparamref name = "T27"/>.</param>
    /// <param name = "onT28">The handler to invoke if the represented type is <typeparamref name = "T28"/>.</param>
    /// <param name = "onT29">The handler to invoke if the represented type is <typeparamref name = "T29"/>.</param>
    /// <param name = "onT30">The handler to invoke if the represented type is <typeparamref name = "T30"/>.</param>
    /// <param name = "onT31">The handler to invoke if the represented type is <typeparamref name = "T31"/>.</param>
    /// <param name = "onT32">The handler to invoke if the represented type is <typeparamref name = "T32"/>.</param>
    void Switch(Action<T1> onT1, Action<T2> onT2, Action<T3> onT3, Action<T4> onT4, Action<T5> onT5, Action<T6> onT6, Action<T7> onT7, Action<T8> onT8, Action<T9> onT9, Action<T10> onT10, Action<T11> onT11, Action<T12> onT12, Action<T13> onT13, Action<T14> onT14, Action<T15> onT15, Action<T16> onT16, Action<T17> onT17, Action<T18> onT18, Action<T19> onT19, Action<T20> onT20, Action<T21> onT21, Action<T22> onT22, Action<T23> onT23, Action<T24> onT24, Action<T25> onT25, Action<T26> onT26, Action<T27> onT27, Action<T28> onT28, Action<T29> onT29, Action<T30> onT30, Action<T31> onT31, Action<T32> onT32);
    /// <summary>
    /// Invokes a projection based on the type of value being represented.
    /// </summary>
    /// <param name = "onT1">The projection to invoke if the represented type is <typeparamref name = "T1"/>.</param>
    /// <param name = "onT2">The projection to invoke if the represented type is <typeparamref name = "T2"/>.</param>
    /// <param name = "onT3">The projection to invoke if the represented type is <typeparamref name = "T3"/>.</param>
    /// <param name = "onT4">The projection to invoke if the represented type is <typeparamref name = "T4"/>.</param>
    /// <param name = "onT5">The projection to invoke if the represented type is <typeparamref name = "T5"/>.</param>
    /// <param name = "onT6">The projection to invoke if the represented type is <typeparamref name = "T6"/>.</param>
    /// <param name = "onT7">The projection to invoke if the represented type is <typeparamref name = "T7"/>.</param>
    /// <param name = "onT8">The projection to invoke if the represented type is <typeparamref name = "T8"/>.</param>
    /// <param name = "onT9">The projection to invoke if the represented type is <typeparamref name = "T9"/>.</param>
    /// <param name = "onT10">The projection to invoke if the represented type is <typeparamref name = "T10"/>.</param>
    /// <param name = "onT11">The projection to invoke if the represented type is <typeparamref name = "T11"/>.</param>
    /// <param name = "onT12">The projection to invoke if the represented type is <typeparamref name = "T12"/>.</param>
    /// <param name = "onT13">The projection to invoke if the represented type is <typeparamref name = "T13"/>.</param>
    /// <param name = "onT14">The projection to invoke if the represented type is <typeparamref name = "T14"/>.</param>
    /// <param name = "onT15">The projection to invoke if the represented type is <typeparamref name = "T15"/>.</param>
    /// <param name = "onT16">The projection to invoke if the represented type is <typeparamref name = "T16"/>.</param>
    /// <param name = "onT17">The projection to invoke if the represented type is <typeparamref name = "T17"/>.</param>
    /// <param name = "onT18">The projection to invoke if the represented type is <typeparamref name = "T18"/>.</param>
    /// <param name = "onT19">The projection to invoke if the represented type is <typeparamref name = "T19"/>.</param>
    /// <param name = "onT20">The projection to invoke if the represented type is <typeparamref name = "T20"/>.</param>
    /// <param name = "onT21">The projection to invoke if the represented type is <typeparamref name = "T21"/>.</param>
    /// <param name = "onT22">The projection to invoke if the represented type is <typeparamref name = "T22"/>.</param>
    /// <param name = "onT23">The projection to invoke if the represented type is <typeparamref name = "T23"/>.</param>
    /// <param name = "onT24">The projection to invoke if the represented type is <typeparamref name = "T24"/>.</param>
    /// <param name = "onT25">The projection to invoke if the represented type is <typeparamref name = "T25"/>.</param>
    /// <param name = "onT26">The projection to invoke if the represented type is <typeparamref name = "T26"/>.</param>
    /// <param name = "onT27">The projection to invoke if the represented type is <typeparamref name = "T27"/>.</param>
    /// <param name = "onT28">The projection to invoke if the represented type is <typeparamref name = "T28"/>.</param>
    /// <param name = "onT29">The projection to invoke if the represented type is <typeparamref name = "T29"/>.</param>
    /// <param name = "onT30">The projection to invoke if the represented type is <typeparamref name = "T30"/>.</param>
    /// <param name = "onT31">The projection to invoke if the represented type is <typeparamref name = "T31"/>.</param>
    /// <param name = "onT32">The projection to invoke if the represented type is <typeparamref name = "T32"/>.</param>
    /// <returns>The projected value.</returns>
    TResult Match<TResult>(Func<T1, TResult> onT1, Func<T2, TResult> onT2, Func<T3, TResult> onT3, Func<T4, TResult> onT4, Func<T5, TResult> onT5, Func<T6, TResult> onT6, Func<T7, TResult> onT7, Func<T8, TResult> onT8, Func<T9, TResult> onT9, Func<T10, TResult> onT10, Func<T11, TResult> onT11, Func<T12, TResult> onT12, Func<T13, TResult> onT13, Func<T14, TResult> onT14, Func<T15, TResult> onT15, Func<T16, TResult> onT16, Func<T17, TResult> onT17, Func<T18, TResult> onT18, Func<T19, TResult> onT19, Func<T20, TResult> onT20, Func<T21, TResult> onT21, Func<T22, TResult> onT22, Func<T23, TResult> onT23, Func<T24, TResult> onT24, Func<T25, TResult> onT25, Func<T26, TResult> onT26, Func<T27, TResult> onT27, Func<T28, TResult> onT28, Func<T29, TResult> onT29, Func<T30, TResult> onT30, Func<T31, TResult> onT31, Func<T32, TResult> onT32);
    /// <summary>
    /// Creates a new instance of the union type using an instance of type <typeparamref name = "T32"/>.
    /// </summary>
    /// <param name = "value">The value from which to create an instance of <typeparamref name = "TSelf"/>.</param>
    /// <returns>A new instance of <typeparamref name = "TSelf"/>.</returns>
    static abstract TSelf Create(T32 value);
}